--Q1
with managers as(
    select
        reports_to as employee_id,
        count(reports_to) as reports_count,
        round(avg(age)) as average_age
    from employees
    where reports_to is not null
    group by reports_to
)

select
    m.employee_id,
    e.name,
    m.reports_count,
    m.average_age
from employees e
inner join managers m
    on e.employee_id = m.employee_id
order by e.employee_id;

--Q2
select
    employee_id,
    department_id
from employee
where primary_flag = 'Y' 
or 
    employee_id in(
        select
            employee_id
        from employee 
        group by employee_id
        having count(employee_id) = 1
    );

--Q3
select
    x,y,z,
    case
        when 
            x+y <= z or x+z <= y or y+z <= x then 'No'
        else 'Yes'
    end as triangle
from triangle;

--Q4
select
    distinct(l.num) as ConsecutiveNums
from logs l
left join logs l1 on l.id = l1.id+1
left join logs l2 on l.id = l2.id+2
where l.num = l1.num and l1.num = l2.num;

--Q5
with p1 as(
    select
        product_id,
        new_price as price,
        rank() over(partition by product_id
        order by change_date desc) rank
    from products
    where change_date <= '2019-08-16'
)

select
    p2.product_id,
    coalesce(p1.price, 10)as price
from (
    select
        distinct product_id
    from 
        products
)p2
left join p1 
    on p2.product_id = p1.product_id
where 
    rank = 1 or rank is null;

--Q6
select
    person_name
from(
    select
        person_id,
        person_name,
        sum(weight) over(order by turn) as total_weight
    from queue
    order by turn desc
)
where total_weight <= 1000
limit 1;

--Q7
with categories as(
    select
        case
            when income < 20000 then 'Low Salary'
            when income >= 20000 and income <= 50000 then 'Average Salary'
            when income > 50000 then 'High Salary'
        end as category,
        count(*) acct_count
    from accounts
    group by category
)

select
    c2.category,
    coalesce(c1.acct_count, 0) accounts_count
from categories c1
right join (
    select 
        category
    from (values ('Low Salary'), ('Average Salary'), ('High Salary')) categories(category)
)c2
on c1.category = c2.category;



