--Q1
SELECT
    *
FROM Cinema
WHERE 
    id % 2 != 0
    AND
    description != 'boring'
ORDER BY
    rating DESC;

--Q2
SELECT
    p.product_id,
    COALESCE(
        ROUND
            (SUM(u.units*p.price)/SUM(u.units)::decimal,
            2),     
        0)AS average_price
FROM Prices p
LEFT JOIN UnitsSold u
    ON p.product_id = u.product_id
    AND u.purchase_date BETWEEN p.start_date AND p.end_date
GROUP BY
    p.product_id;

--Q3
SELECT
    p.project_id,
    ROUND(SUM(e.experience_years)/COUNT(p.employee_id)::decimal, 2) AS average_years
FROM Project p
LEFT JOIN Employee e
    ON p.employee_id = e.employee_id
GROUP BY 
    p.project_id;

--Q4
SELECT
    r.contest_id,
    ROUND((COUNT(r.user_id)::decimal/(SELECT COUNT(*) FROM Users))*100, 2) AS percentage
FROM Register r
GROUP BY
    r.contest_id
ORDER BY
    percentage DESC,
    r.contest_id;

--Q5
SELECT
    query_name,
    ROUND(AVG(rating::numeric/position::numeric)::numeric, 2)as quality,
    ROUND(((count(*) filter (where rating < 3))::numeric / count(*)::numeric)* 100, 2)as  poor_query_percentage 
from Queries
where query_name IS NOT NULL
group by query_name;

--Q6
select
    to_char(trans_date, 'yyyy-mm')as month,
    country,
    count(amount) as trans_count,
    sum(amount) as trans_total_amount,
    count(case when state ='approved' then 1 end) as approved_count,
    coalesce(sum(case when state = 'approved' then amount end), 0) as approved_total_amount
from Transactions
group by month, country;
